<?xml version="1.0" encoding="UTF-8"?>
<channel version="3.12.0">
  <id>HL7_JSON_API</id>
  <name>HL7 to JSON API - Patient Registration</name>
  <description>Receives HL7 v2 messages, converts them to JSON, sends to an API endpoint, and processes the response</description>
  <enabled>true</enabled>
  <version>1.0</version>
  <lastModified>
    <time>1712560000000</time>
    <timezone>America/Los_Angeles</timezone>
  </lastModified>
  <revision>1</revision>
  <sourceConnector version="3.12.0">
    <name>Source</name>
    <transportName>TCP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <properties class="com.mirth.connect.connectors.tcp.TcpReceiverProperties">
      <host>0.0.0.0</host>
      <port>6661</port>
      <serverMode>true</serverMode>
      <dataType>HL7V2</dataType>
      <responseVariable>HL7_ACK_RESPONSE</responseVariable>
      <respondAfterProcessing>true</respondAfterProcessing>
      <processHl7AckResponse>true</processHl7AckResponse>
    </properties>
    <transformer version="3.12.0">
      <outboundDataType>JSON</outboundDataType>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties">
          <splitType>JavaScript</splitType>
        </batchProperties>
      </outboundProperties>
      <step>
        <name>Convert HL7 to JSON</name>
        <sequenceNumber>0</sequenceNumber>
        <enabled>true</enabled>
        <script>// Store the original message for reference
var originalMessage = msg;
logger.info(&apos;Received HL7 message: &apos; + originalMessage);

// Create a JSON object from the HL7 message
var jsonObject = {};

// Extract MSH segment data
var msh = getSegment(msg, &apos;MSH&apos;);
if (msh) {
    jsonObject.message_header = {
        sending_application: getField(msh, 3),
        sending_facility: getField(msh, 4),
        receiving_application: getField(msh, 5),
        receiving_facility: getField(msh, 6),
        message_datetime: getField(msh, 7),
        message_type: getField(msh, 9),
        message_control_id: getField(msh, 10)
    };
}

// Extract PID segment data
var pid = getSegment(msg, &apos;PID&apos;);
if (pid) {
    var nameParts = getField(pid, 5).split(&apos;^&apos;);
    jsonObject.patient = {
        id: getField(pid, 3).split(&apos;^&apos;)[0],
        last_name: nameParts[0] || &apos;&apos;,
        first_name: nameParts[1] || &apos;&apos;,
        middle_name: nameParts[2] || &apos;&apos;,
        date_of_birth: getField(pid, 7),
        gender: getField(pid, 8),
        address: {
            street: getField(pid, 11).split(&apos;^&apos;)[0],
            city: getField(pid, 11).split(&apos;^&apos;)[2],
            state: getField(pid, 11).split(&apos;^&apos;)[3],
            zip: getField(pid, 11).split(&apos;^&apos;)[4],
            country: getField(pid, 11).split(&apos;^&apos;)[5]
        },
        phone_home: getField(pid, 13),
        phone_business: getField(pid, 14),
        ssn: getField(pid, 19)
    };
}

// Extract PV1 segment data
var pv1 = getSegment(msg, &apos;PV1&apos;);
if (pv1) {
    var doctorId = getField(pv1, 7).split(&apos;^&apos;)[0];
    var doctorLastName = getField(pv1, 7).split(&apos;^&apos;)[1];
    var doctorFirstName = getField(pv1, 7).split(&apos;^&apos;)[2];
    
    jsonObject.visit = {
        patient_class: getField(pv1, 2),
        assigned_location: getField(pv1, 3),
        attending_doctor: {
            id: doctorId,
            last_name: doctorLastName,
            first_name: doctorFirstName
        },
        visit_number: getField(pv1, 19),
        admission_date: getField(pv1, 44)
    };
}

// Convert JSON object to a string
var jsonPayload = JSON.stringify(jsonObject, null, 2);
channelMap.put(&apos;jsonPayload&apos;, jsonPayload);
logger.info(&apos;Converted to JSON: &apos; + jsonPayload);

// Helper function to get a segment from the HL7 message
function getSegment(message, segmentName) {
    var pattern = new RegExp(segmentName + &apos;\\|.*&apos;, &apos;g&apos;);
    var matches = message.match(pattern);
    return matches ? matches[0] : null;
}

// Helper function to get a field from a segment
function getField(segment, fieldIndex) {
    if (!segment) return &apos;&apos;;
    var fields = segment.split(&apos;|&apos;);
    return fieldIndex &lt; fields.length ? fields[fieldIndex] : &apos;&apos;;
}

// Set transformed data as the outgoing message
channelMap.put(&apos;originalHL7&apos;, msg);
return jsonPayload;</script>
      </step>
    </transformer>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.12.0">
      <name>API Destination</name>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties">
        <host>http://localhost:8080/api/patients</host>
        <method>POST</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Content-Type</string>
            <string>application/json</string>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
      </properties>
      <transformer version="3.12.0">
        <step>
          <name>Process API Response</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>// Get the API response
var apiResponse = msg;
logger.info(&apos;Received API response: &apos; + apiResponse);

try {
    // Parse the API response as JSON
    var responseJson = JSON.parse(apiResponse);
    
    // Create a response message based on the API response
    var success = responseJson.success || false;
    var patientId = responseJson.patientId || &apos;&apos;;
    var message = responseJson.message || &apos;No message from API&apos;;
    
    // Store the response data in the channel map
    channelMap.put(&apos;apiResponseSuccess&apos;, success);
    channelMap.put(&apos;apiResponsePatientId&apos;, patientId);
    channelMap.put(&apos;apiResponseMessage&apos;, message);
    
    // Generate an HL7 ACK message based on the API response
    var originalHL7 = channelMap.get(&apos;originalHL7&apos;);
    var msh = getSegment(originalHL7, &apos;MSH&apos;);
    var messageControlId = getField(msh, 10);
    
    var currentDate = new java.text.SimpleDateFormat(&apos;yyyyMMddHHmmss&apos;).format(new java.util.Date());
    
    var ackCode = success ? &apos;AA&apos; : &apos;AE&apos;;
    var ackMessage = success ? &apos;Message processed successfully&apos; : &apos;Error processing message: &apos; + message;
    
    var ack = &apos;MSH|^~\\&amp;|RECEIVING_APPLICATION|RECEIVING_FACILITY|&apos; + 
              getField(msh, 3) + &apos;|&apos; + getField(msh, 4) + &apos;|&apos; +
              currentDate + &apos;||ACK^A01|ACK&apos; + messageControlId + &apos;|P|2.5\r&apos; +
              &apos;MSA|&apos; + ackCode + &apos;|&apos; + messageControlId + &apos;|&apos; + ackMessage + &apos;\r&apos;;
    
    if (success) {
        ack += &apos;ZPA|&apos; + patientId + &apos;|Registration successful\r&apos;;
    }
    
    channelMap.put(&apos;HL7_ACK_RESPONSE&apos;, ack);
    return ackMessage;
} catch (e) {
    logger.error(&apos;Error processing API response: &apos; + e);
    
    // Generate an error ACK message
    var originalHL7 = channelMap.get(&apos;originalHL7&apos;);
    var msh = getSegment(originalHL7, &apos;MSH&apos;);
    var messageControlId = getField(msh, 10);
    
    var currentDate = new java.text.SimpleDateFormat(&apos;yyyyMMddHHmmss&apos;).format(new java.util.Date());
    
    var ackMessage = &apos;MSH|^~\\&amp;|RECEIVING_APPLICATION|RECEIVING_FACILITY|&apos; + 
                   getField(msh, 3) + &apos;|&apos; + getField(msh, 4) + &apos;|&apos; +
                   currentDate + &apos;||ACK^A01|ACK&apos; + messageControlId + &apos;|P|2.5\r&apos; +
                   &apos;MSA|AE|&apos; + messageControlId + &apos;|Error processing API response\r&apos;;
    
    channelMap.put(&apos;HL7_ACK_RESPONSE&apos;, ackMessage);
    return &apos;Error processing API response: &apos; + e;
}

// Helper function to get a segment from the HL7 message
function getSegment(message, segmentName) {
    var pattern = new RegExp(segmentName + &apos;\\|.*&apos;, &apos;g&apos;);
    var matches = message.match(pattern);
    return matches ? matches[0] : null;
}

// Helper function to get a field from a segment
function getField(segment, fieldIndex) {
    if (!segment) return &apos;&apos;;
    var fields = segment.split(&apos;|&apos;);
    return fieldIndex &lt; fields.length ? fields[fieldIndex] : &apos;&apos;;
}</script>
        </step>
      </transformer>
    </connector>
  </destinationConnectors>
</channel>
